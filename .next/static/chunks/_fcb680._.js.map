{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxhager/projects/worldwomanmap/components/WorldMap.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Image from \"next/image\";\n\nconst WorldMap = () => {\n  const [tooltip, setTooltip] = useState({ show: false, text: \"\", x: 0, y: 0 });\n  const [selectedImage, setSelectedImage] = useState({\n    show: false,\n    country: \"\",\n  });\n\n  useEffect(() => {\n    // Load and inject the SVG\n    fetch(\"/world-map.svg\")\n      .then((response) => response.text())\n      .then((svgContent) => {\n        const mapContainer = document.getElementById(\"map-container\");\n        if (mapContainer) {\n          mapContainer.innerHTML = svgContent;\n\n          // Get all paths and g elements (some countries might be in g elements)\n          const allPaths = mapContainer.querySelectorAll(\"path, g\");\n          allPaths.forEach((element) => {\n            element.style.fill = \"#ECEFF1\";\n            element.style.stroke = \"#607D8B\";\n            element.style.strokeWidth = \"0.5\";\n            element.style.transition = \"fill 0.2s\";\n\n            element.addEventListener(\"mousemove\", (e) => {\n              const id = element.id || \"\";\n              console.log(\"Element ID:\", id); // Debug log\n\n              if (id === \"ca\") {\n                const countryName = \"Canada\";\n                console.log(\"Showing country:\", countryName); // Debug log\n\n                setTooltip({\n                  show: true,\n                  text: countryName,\n                  x: e.clientX,\n                  y: e.clientY,\n                });\n                setSelectedImage({\n                  show: true,\n                  country: countryName,\n                });\n                element.style.fill = \"#D0D9DC\";\n              }\n            });\n\n            element.addEventListener(\"mouseleave\", () => {\n              setTooltip({ show: false, text: \"\", x: 0, y: 0 });\n              setSelectedImage({ show: false, country: \"\" });\n              element.style.fill = \"#ECEFF1\";\n            });\n          });\n        }\n      });\n  }, []);\n\n  return (\n    <div className=\"flex\">\n      {/* Map container */}\n      <div className=\"relative flex-1\">\n        <div\n          id=\"map-container\"\n          className=\"w-full h-screen flex items-center justify-center\"\n        />\n        {tooltip.show && (\n          <div\n            className=\"absolute z-10 bg-black text-white px-2 py-1 rounded text-sm pointer-events-none\"\n            style={{\n              left: `${tooltip.x + 10}px`,\n              top: `${tooltip.y - 20}px`,\n              transform: \"translate(-50%, -100%)\",\n            }}\n          >\n            {tooltip.text}\n          </div>\n        )}\n      </div>\n\n      {/* Image container */}\n      <div className=\"w-1/3 h-screen flex items-center justify-center bg-gray-100\">\n        {selectedImage.show && (\n          <div className=\"p-4\">\n            <Image\n              src={`/generated_images/Canada.jpg`}\n              alt=\"Woman from Canada\"\n              width={400}\n              height={400}\n              className=\"rounded-lg shadow-lg\"\n              style={{ objectFit: \"cover\" }}\n              priority\n            />\n            <p className=\"text-center mt-2 text-gray-700\">Woman from Canada</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WorldMap;\n"],"names":[],"mappings":";;;;AAEA;AACA;;;AAHA;;;AAKA,MAAM,WAAW;;IACf,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,MAAM;QAAO,MAAM;QAAI,GAAG;QAAG,GAAG;IAAE;IAC3E,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;QACjD,MAAM;QACN,SAAS;IACX;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,0BAA0B;YAC1B,MAAM,kBACH,IAAI;sCAAC,CAAC,WAAa,SAAS,IAAI;qCAChC,IAAI;sCAAC,CAAC;oBACL,MAAM,eAAe,SAAS,cAAc,CAAC;oBAC7C,IAAI,cAAc;wBAChB,aAAa,SAAS,GAAG;wBAEzB,uEAAuE;wBACvE,MAAM,WAAW,aAAa,gBAAgB,CAAC;wBAC/C,SAAS,OAAO;kDAAC,CAAC;gCAChB,QAAQ,KAAK,CAAC,IAAI,GAAG;gCACrB,QAAQ,KAAK,CAAC,MAAM,GAAG;gCACvB,QAAQ,KAAK,CAAC,WAAW,GAAG;gCAC5B,QAAQ,KAAK,CAAC,UAAU,GAAG;gCAE3B,QAAQ,gBAAgB,CAAC;0DAAa,CAAC;wCACrC,MAAM,KAAK,QAAQ,EAAE,IAAI;wCACzB,QAAQ,GAAG,CAAC,eAAe,KAAK,YAAY;wCAE5C,IAAI,OAAO,MAAM;4CACf,MAAM,cAAc;4CACpB,QAAQ,GAAG,CAAC,oBAAoB,cAAc,YAAY;4CAE1D,WAAW;gDACT,MAAM;gDACN,MAAM;gDACN,GAAG,EAAE,OAAO;gDACZ,GAAG,EAAE,OAAO;4CACd;4CACA,iBAAiB;gDACf,MAAM;gDACN,SAAS;4CACX;4CACA,QAAQ,KAAK,CAAC,IAAI,GAAG;wCACvB;oCACF;;gCAEA,QAAQ,gBAAgB,CAAC;0DAAc;wCACrC,WAAW;4CAAE,MAAM;4CAAO,MAAM;4CAAI,GAAG;4CAAG,GAAG;wCAAE;wCAC/C,iBAAiB;4CAAE,MAAM;4CAAO,SAAS;wCAAG;wCAC5C,QAAQ,KAAK,CAAC,IAAI,GAAG;oCACvB;;4BACF;;oBACF;gBACF;;QACJ;6BAAG,EAAE;IAEL,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,IAAG;wBACH,WAAU;;;;;;oBAEX,QAAQ,IAAI,kBACX,6LAAC;wBACC,WAAU;wBACV,OAAO;4BACL,MAAM,GAAG,QAAQ,CAAC,GAAG,GAAG,EAAE,CAAC;4BAC3B,KAAK,GAAG,QAAQ,CAAC,GAAG,GAAG,EAAE,CAAC;4BAC1B,WAAW;wBACb;kCAEC,QAAQ,IAAI;;;;;;;;;;;;0BAMnB,6LAAC;gBAAI,WAAU;0BACZ,cAAc,IAAI,kBACjB,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,gIAAA,CAAA,UAAK;4BACJ,KAAK,CAAC,4BAA4B,CAAC;4BACnC,KAAI;4BACJ,OAAO;4BACP,QAAQ;4BACR,WAAU;4BACV,OAAO;gCAAE,WAAW;4BAAQ;4BAC5B,QAAQ;;;;;;sCAEV,6LAAC;4BAAE,WAAU;sCAAiC;;;;;;;;;;;;;;;;;;;;;;;AAM1D;GAjGM;KAAA;uCAmGS"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}